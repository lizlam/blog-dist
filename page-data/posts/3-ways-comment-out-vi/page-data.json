{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/3-ways-comment-out-vi","result":{"data":{"markdownRemark":{"id":"d9568a2a-83aa-51e5-b8d6-b5875659dc41","html":"<p>Learning <code class=\"language-text\">vi</code> for the first time can be really intimidating.  The learning curve is a bit high and there are <em>many</em> ways to do <em>many</em> things in this simple yet powerful editor.  There will come a point where you will be comfortable navigating around using the <code class=\"language-text\">h</code> <code class=\"language-text\">j</code> <code class=\"language-text\">k</code> and <code class=\"language-text\">l</code> keys and going between <em>command</em> mode and <em>insert</em> mode will be second nature.  This is where things get real fun and adding more commands to your <code class=\"language-text\">vi</code> toolbox will make you even more productive.</p>\n<p>Have you ever found yourself in <code class=\"language-text\">vi</code> wanting to comment and uncomment blocks of code?  Here are 3 ways to accomplish this.</p>\n<h2 id=\"the-bad-way\" style=\"position:relative;\"><a href=\"#the-bad-way\" aria-label=\"the bad way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Bad Way</h2>\n<p><img src=\"/media/vim-comment-bad.gif\" alt=\"Using VI ineffeciently\">\nIt may be a little unfair to call this the “bad” way, but it’s certainly the most inefficient.  You start your editor, navigate down to the beginning row of the block you want to comment out.  You hit <code class=\"language-text\">i</code> to go into <em>insert</em> mode, enter <code class=\"language-text\">//</code> to comment, hit <code class=\"language-text\">ESC</code> to go back to <em>command</em> mode, hit <code class=\"language-text\">j</code> to navigate down to the next row, and then repeat until all the rows are commented out.<br>\nTo uncomment the rows, you do almost the same thing.  Navigate your cursor the beginning of the last row you want to comment.  Hit <code class=\"language-text\">xx</code> to remove the first two characters of the line (in our case the <code class=\"language-text\">//</code> chars), hit <code class=\"language-text\">h</code> to navigate up to the next row, and then repeat until all rows are uncommented.<br>\nBeing able to navigate around and insert and remove characters like this is definitely not something to be scoffed at.  It takes time to even get to this point of sufficiency, but there are better ways.</p>\n<h2 id=\"the-better-way\" style=\"position:relative;\"><a href=\"#the-better-way\" aria-label=\"the better way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Better Way</h2>\n<p><img src=\"vim-comment-better.gif\" alt=\"Better\">\nSubstitution with regular expressions is a powerful tool in <code class=\"language-text\">vi</code>.</p>\n<p>While in <em>command</em> mode:\nHit <code class=\"language-text\">:</code> to enter <em>escape</em> mode\nType <code class=\"language-text\">11,17s/^/\\/\\//</code> and then hit <code class=\"language-text\">ENTER</code></p>\n<p>DONE!</p>\n<p>Woh, woh, woh! What just happened here?</p>\n<p>Let’s break it down in some detail.\n<code class=\"language-text\">11,17</code> is the range you are interested in.  In this case, lines 11-17.<br>\n<code class=\"language-text\">s</code> stands for substitute.  The next two arguments are separated by <code class=\"language-text\">/</code>, the first being the location or old value and the second being the new value.<br>\nFor example:\n<code class=\"language-text\">s/cat/dog/</code> takes the first occurrence of the word <code class=\"language-text\">cat</code> and replaces it with the word <code class=\"language-text\">dog</code>.  This will happen for every line.</p>\n<p>Now you may have noticed a little problem.  We are trying to substitute nothing with <code class=\"language-text\">//</code>.  Well “nothing” is really the beginning of each line which is represented with <code class=\"language-text\">^</code> (the caret character).</p>\n<p>So <code class=\"language-text\">s/^/dog/</code> would add the word <code class=\"language-text\">dog</code> to the beginning of each line.</p>\n<p>What about <code class=\"language-text\">//</code>?  Won’t <code class=\"language-text\">vi</code> get confused since substitution uses <code class=\"language-text\">/</code> to separate the old value from the new value?  This is where we need to use <code class=\"language-text\">\\</code> (forward slash) to escape the double back slashes that represent commenting.<br>\n<code class=\"language-text\">/\\/\\</code> is the <em>escaped</em> version of <code class=\"language-text\">//</code>.  Escaping these characters tells the command that we <em>literally</em> want to use <code class=\"language-text\">/</code> twice and not to interpret it as a separator for the command.</p>\n<p>We put it all together to get <code class=\"language-text\">11,17s/^/\\/\\//</code>.</p>\n<p>Uncommenting uses a similar pattern.</p>\n<p>Hit <code class=\"language-text\">:</code> to enter <em>escape</em> mode and enter <code class=\"language-text\">11,17s/\\/\\///</code>.</p>\n<p>Like before, our range is lines 11-17.  This time our first argument is the escaped version of <code class=\"language-text\">//</code> and the second value is left out.  This literally means we are substituting escaped <code class=\"language-text\">//</code> with nothing, and therefore removing it.</p>\n<p>Phew! That was a lot to cover!  This is definitely a very powerful technique, but like many commands involving regular expressions, it can look very ugly.</p>\n<h2 id=\"the-best-way\" style=\"position:relative;\"><a href=\"#the-best-way\" aria-label=\"the best way permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Best Way</h2>\n<p><img src=\"vim-comment-best.gif\" alt=\"Best\">\nThere is another mode in <code class=\"language-text\">vi</code> that can be utilized for our task at hand.  Visual block mode allows us to visually block off a section of the editor to perform actions on it.  We first start off by navigating down the beginning of the top row we’re interested in.</p>\n<p>Hit <code class=\"language-text\">CTRL</code> + <code class=\"language-text\">v</code> to enter visual block mode.\nUse <code class=\"language-text\">j</code> to navigate and block off the beginning of lines 11-17.\nHit <code class=\"language-text\">SHIFT</code> + <code class=\"language-text\">i</code> (capital i) to enter insert mode.\nType <code class=\"language-text\">//</code> and hit <code class=\"language-text\">ESC</code></p>\n<p>Uncommenting is just as simple.</p>\n<p>Hit <code class=\"language-text\">CTRL</code> + <code class=\"language-text\">v</code> to enter visual block mode again.\nNavigate and block off the <code class=\"language-text\">//</code>s in lines 11-17.\nHit <code class=\"language-text\">x</code> to delete.</p>\n<p>The combination of using visual mode and commands is the most practical and best way to comment and uncomment code.  Apologies to the regex fans out there!</p>\n<p><em><strong>NOTE:</strong></em> <strong>Visual mode is actually a feature of <code class=\"language-text\">vim</code> and not original <code class=\"language-text\">vi</code>.  Most modern systems actually use <code class=\"language-text\">vim</code> and the binary is either renamed or aliased to <code class=\"language-text\">vi</code>.</strong></p>\n<p>It’s hard to believe this is only the tip of iceberg of things that can be accomplished in <code class=\"language-text\">vi</code>.  Getting pass the initial hump is really the hardest part.  More proficiency in <code class=\"language-text\">vi</code> translates to more efficiency and productivity.  I hope this encourages you to explore and have some fun with this awesome little editor.</p>\n<p><em><strong>DISCLAIMER:</strong></em> <strong>The criteria used to place the <em>Bad</em>, <em>Better</em>, and <em>Best</em> judgments are based upon my personal tastes.</strong></p>","fields":{"slug":"/posts//posts/3-ways-comment-out-vi","tagSlugs":["/tag/vi/","/tag/command-line/"]},"frontmatter":{"date":"2019-09-21","description":"Learn different ways to comment out code in vi.","tags":["vi","command line"],"title":"3 Ways to Comment Out Blocks of Code in vi","socialImage":null}}},"pageContext":{"slug":"/posts//posts/3-ways-comment-out-vi"}},"staticQueryHashes":["251939775","2764776372","401334301","63107425"]}