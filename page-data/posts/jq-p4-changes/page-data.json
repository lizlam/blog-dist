{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/jq-p4-changes","result":{"data":{"markdownRemark":{"id":"23c77269-a4be-5d86-a973-88b93a03ca70","html":"<p><em>UPDATE: Just a few days after hitting publish on this blog, a few folks from the Perforce community shared a better way to output JSON data from p4 commands using the <code class=\"language-text\">-ztag</code> and <code class=\"language-text\">-Mj</code> flags: <code class=\"language-text\">p4 -ztag -Mj changes -m3 | jq -s '.'</code></em></p>\n<p>I recently ran across <a href=\"https://til.simonwillison.net/jq/git-log-json\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this blog</a> showing how to use <code class=\"language-text\">jq</code> to format <code class=\"language-text\">git log</code> output to JSON.  Curious about <code class=\"language-text\">jq</code> and wanting to try a similar thing with Perforce, I was able to modify the example pretty easily.</p>\n<p>This is what <code class=\"language-text\">p4 changes</code> output looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ p4 changes\n\nChange 3 on 2023/07/20 by grepliz@test-local-01 'Add day1.pdf'\nChange 2 on 2023/07/20 by grepliz@test-local-01 'Add crazy.psd.'\nChange 1 on 2023/07/20 by grepliz@test-local-01 'Populated server with files '</code></pre></div>\n<p>Here is how you can format to JSON using <code class=\"language-text\">jq</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ p4 changes | jq -R -s '[split(\"\\n\")[:-1] | map(split(\"\\u0020\")) | .[] | { \"change\": .[1], \"author\": .[5], \"date\": .[3], \"message\": .[6:length] | join(\" \") }]'\n\n[\n  {\n    \"change\": \"3\",\n    \"author\": \"grepliz@test-local-01\"\n    \"date\": \"2023/07/20\",\n    \"message\": \"'Add day1.pdf'\"\n  },\n  {\n    \"change\": \"2\",\n    \"author\": \"grepliz@test-local-01\",\n    \"date\": \"2023/07/20\",\n    \"message\": \"'Add crazy.psd.'\"\n  },\n  {\n    \"change\": \"1\",\n    \"author\": \"grepliz@test-local-01\",\n    \"date\": \"2023/07/20\",\n    \"message\": \"'Populated server with files '\"\n  }\n]</code></pre></div>\n<p>I think the original blog I referred to gives a pretty good explanation of what is going on, but I find it helpful to write out what is going on for future reference.</p>\n<h1 id=\"the-input-p4-changes\" style=\"position:relative;\"><a href=\"#the-input-p4-changes\" aria-label=\"the input p4 changes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The input: <code class=\"language-text\">p4 changes</code></h1>\n<p>I know the output of <code class=\"language-text\">p4 changes</code> is being piped into the <code class=\"language-text\">jq</code> program and it is helpful that the output is delimited by a space character and is one line per changelist.  This output produces the columns needed for programs like <code class=\"language-text\">jq</code> and <code class=\"language-text\">awk</code>.</p>\n<h1 id=\"the-flags-jq--r--s\" style=\"position:relative;\"><a href=\"#the-flags-jq--r--s\" aria-label=\"the flags jq  r  s permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The flags: <code class=\"language-text\">jq -R -s</code></h1>\n<p>The <code class=\"language-text\">jq</code> flags being used are nicely <a href=\"https://jqlang.github.io/jq/manual/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">documented here</a>.</p>\n<p><em>—slurp/-s:</em>\n<em>Instead of running the filter for each JSON object in the input, read the entire input stream into a large array and run the filter just once.</em></p>\n<p><em>—raw-input/-R:</em>\n<em>Don’t parse the input as JSON. Instead, each line of text is passed to the filter as a string. If combined with —slurp, then the entire input is passed to the filter as a single long string.</em></p>\n<h1 id=\"the-jq-filter\" style=\"position:relative;\"><a href=\"#the-jq-filter\" aria-label=\"the jq filter permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The <code class=\"language-text\">jq</code> filter</h1>\n<p><code class=\"language-text\">'[split(\"\\n\")[:-1] | map(split(\"\\u0020\")) | .[] | { \"change\": .[1], \"author\": .[5], \"date\": .[3], \"message\": .[6:length] | join(\" \") }]'</code></p>\n<p>This is where all the magic happens. There are basically 4 sections to this filter.</p>\n<ul>\n<li><code class=\"language-text\">split(\"\\n\")[:-1]</code></li>\n</ul>\n<p>This says to split on newlines. If we were to stop here, we would get an array of the changelists.\nExample:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">p4 changes | jq -R -s 'split(\"\\n\")[:-1]'\n[\n  \"Change 3 on 2023/07/20 by grepliz@test-local-01 'Add day1.pdf'\",\n  \"Change 2 on 2023/07/20 by grepliz@test-local-01 'Add crazy.psd.'\",\n  \"Change 1 on 2023/07/20 by grepliz@test-local-01 'Populated server with files '\"\n]</code></pre></div>\n<ul>\n<li><code class=\"language-text\">map(split(\"\\u0020\"))</code></li>\n</ul>\n<p>This tells the filter to map and split on the space character.\nWhen combined with #1 above it would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">p4 changes | jq -R -s 'split(\"\\n\")[:-1] | map(split(\"\\u0020\"))'\n                                                                    \n[\n  [\n    \"Change\",\n    \"3\",\n    \"on\",\n    \"2023/07/20\",\n    \"by\",\n    \"grepliz@test-local-01\",\n    \"'Add\",\n    \"day1.pdf'\"\n  ],\n  [\n    \"Change\",\n    \"2\",\n    \"on\",\n    \"2023/07/20\",\n    \"by\",\n    \"grepliz@test-local-01\",\n    \"'Add\",\n    \"crazy.psd.'\"\n  ],\n  [\n    \"Change\",\n    \"1\",\n    \"on\",\n    \"2023/07/20\",\n    \"by\",\n    \"grepliz@test-local-01\",\n    \"'Populated\",\n    \"server\",\n    \"with\",\n    \"files\",\n    \"'\"\n  ]\n]</code></pre></div>\n<ul>\n<li><code class=\"language-text\">.[]</code></li>\n</ul>\n<p>This creates arrays of the values such that we can iterate over it.  The following is from the documentation:</p>\n<p><em>Array/Object Value Iterator: .[]</em>\n<em>If you use the .[index] syntax, but omit the index entirely, it will return all of the elements of an array. Running .[] with the input [1,2,3] will produce the numbers as three separate results, rather than as a single array.</em>*</p>\n<p><em>You can also use this on an object, and it will return all the values of the object.</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">p4 changes | jq -R -s 'split(\"\\n\")[:-1] | map(split(\"\\u0020\")) | .[]'\n\n[\n  \"Change\",\n  \"3\",\n  \"on\",\n  \"2023/07/20\",\n  \"by\",\n  \"grepliz@test-local-01\",\n  \"'Add\",\n  \"day1.pdf'\"\n]\n[\n  \"Change\",\n  \"2\",\n  \"on\",\n  \"2023/07/20\",\n  \"by\",\n  \"grepliz@test-local-01\",\n  \"'Add\",\n  \"crazy.psd.'\"\n]\n[\n  \"Change\",\n  \"1\",\n  \"on\",\n  \"2023/07/20\",\n  \"by\",\n  \"grepliz@test-local-01\",\n  \"'Populated\",\n  \"server\",\n  \"with\",\n  \"files\",\n  \"'\"\n]</code></pre></div>\n<ul>\n<li><code class=\"language-text\">{ \"change\": .[1], \"author\": .[5], \"date\": .[3], \"message\": .[6:length] | join(\" \") }</code></li>\n</ul>\n<p>Finally, this section gives us the desired JSON shape of each changelist and by wrapping the whole thing (the whole jq filter) with <code class=\"language-text\">[]</code>, we get the final array.</p>","fields":{"slug":"/posts//posts/jq-p4-changes","tagSlugs":["/tag/p4/","/tag/jq/"]},"frontmatter":{"date":"2023-07-21","description":"Create JSON formatted data from p4 changes output.","tags":["p4","jq"],"title":"Use jq to format p4 changes output to JSON","socialImage":null}}},"pageContext":{"slug":"/posts//posts/jq-p4-changes"}},"staticQueryHashes":["251939775","2764776372","401334301"]}