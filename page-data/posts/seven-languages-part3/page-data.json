{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/seven-languages-part3","result":{"data":{"markdownRemark":{"id":"91ac3fcd-f423-5fcb-b109-955e6c06e067","html":"<p>This is a continuation of my thoughts on Seven Languages in Seven Weeks by Bruce Tate.    </p>\n<p>“Clojure and Java desperately need each other.  Lisp needs the market place that the Java Virtual Machine can offer, and the Java community needs a serious update and an injection of fun.”</p>\n<p>It’s been a little while and was able to pick up this book again.  I was excited to learn a bit about Clojure since I know Uncle Bob (aka Robert Martin) is a big fan.  It’s interesting to read the above quote since at the time of reading this chapter in 2022 (the book was writtenin 2010), the bit about the Java community needing an update and injection of fun still feels true.  </p>\n<p>Time has been at a premium for me but I wanted to jot down some quick notes on this chapter.</p>\n<ul>\n<li>Function args are separated by spaces.<br>\nExample: <code class=\"language-text\">(+ 1 1)</code> evaluates to 2.</li>\n<li>Clojure uses prefix notation.<br>\nExamples:<br>\n<code class=\"language-text\">(+ 2 2 2 2)</code> evaluates to 8.<br>\n<code class=\"language-text\">(- 8 1 2 )</code> evaluates to 5.<br>\n<code class=\"language-text\">(&lt; 1 2 3 4)</code> evaluates to true.<br>\n<code class=\"language-text\">(&lt; 1 3 2 4)</code> evalutes to false.    </li>\n<li>Clojure coerces types.<br>\nExample:\n<code class=\"language-text\">(+ 3.0 5)</code> evaluates to 8.0.</li>\n<li>Use ‘str’ to concatenate strings.<br>\nExample:\n<code class=\"language-text\">(str \"name, \" \"date, \" \"age.\")</code> evaluates to “name, date, age.”</li>\n</ul>\n<p>This is how you do an <code class=\"language-text\">if</code>:<br>\n<code class=\"language-text\">(if true (println \"it's true!\"))</code> prints “it’s true!“.</p>\n<p>If you want an <code class=\"language-text\">else</code> add a third argument:\n<code class=\"language-text\">(if true (println \"it's true!\") (println \"false))</code> still prints “it’s true!“.</p>\n<ul>\n<li><code class=\"language-text\">0</code> and <code class=\"language-text\">\"\"</code> are true, <code class=\"language-text\">nil</code> is not true.  This is weird!</li>\n<li>Use keyword <code class=\"language-text\">def</code> to define variables.</li>\n<li>Use keyword <code class=\"language-text\">defn</code> to define functions.</li>\n<li>The simplest form of a function is: <code class=\"language-text\">(defn [params] body)</code></li>\n</ul>\n<p>This is an example of a “Hello World” program in Clojure using functions.</p>\n<p><code class=\"language-text\">(defn hello [name] (str \"Hello, \" name))</code></p>\n<p>Invoke this with: <code class=\"language-text\">(hello \"liz\")</code> and the output will be “Hello, liz”.</p>","fields":{"slug":"/posts/seven-languages-part3","tagSlugs":null},"frontmatter":{"date":"2022-12-03","description":"Quick thoughts on Clojure as I continue to work through Seven Languages in Seven Weeks by Bruce Tate.","tags":null,"title":"Some Quick Thoughts on Seven Languages in Seven Weeks - Part 3","socialImage":null}}},"pageContext":{"slug":"/posts/seven-languages-part3"}},"staticQueryHashes":["251939775","401334301","914177244"]}