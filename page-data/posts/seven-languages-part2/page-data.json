{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/seven-languages-part2","result":{"data":{"markdownRemark":{"id":"877f7d5f-3e74-5b45-b8f4-3e9a009a63eb","html":"<p>This is a continuation of my thoughts on Seven Languages in Seven Weeks by Bruce Tate.</p>\n<p>The Scala chapter of the book so far seems the most familiar to me.  I have a pretty good understanding of\nJava, so I naturally leaned into this language quite a bit more than the others.  This is the\nfirst time I saw <code class=\"language-text\">traits</code> outside of a Rust context (another language I’ve been trying to learn on the side).\nTraits are basically interfaces with implementation.</p>\n<p>There are distinct and explicit ways to declare mutable and immutable variables i.e. use <code class=\"language-text\">val</code> for immutable values and <code class=\"language-text\">var</code> for mutable variables.</p>\n<p>A similar approach is used for static classes.  Instead of adding the <code class=\"language-text\">static</code> keyword in front of the class declaration\n(like in Java), Scala uses the keyword <code class=\"language-text\">object</code>.</p>\n<p>One interesting bit in Scala is that XML is valid syntax.  This reminded me a lot of React and JSX.</p>\n<p>The pattern matching with conditions look like a really powerful tool over your basic switch/case statements.</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def factorial(n: Int): Int = n match {\n    case 0 => 1\n    case x if x > 0 => factorial(n - 1) * n\n}</code></pre></div>\n<p>The author’s conclusion for Scala is mixed, but I like how you are able to start with object oriented programs and ease your way\ninto functional paradigms.  Perhaps this allows too much of an escape hatch for a functional programmer’s taste?</p>\n<p><strong>The next chapter is on Erlang.</strong></p>\n<p>A few of my notes:</p>\n<ul>\n<li>Statements end in period.</li>\n<li>There is no type coercion.  Example: <code class=\"language-text\">1 + \"2\"</code> does not work.</li>\n<li>Variables begin with capital letter and immutable.</li>\n<li>Functions use <code class=\"language-text\">fun</code> keyword.</li>\n<li>There is a prolog-based syntax.</li>\n<li>Use the keyword <code class=\"language-text\">spawn</code> to spawn a process.</li>\n<li>Send messages to threads with <code class=\"language-text\">Pid ! \"message\"</code>.</li>\n<li>Interprocess communication is REALLY easy.</li>\n</ul>\n<p>I enjoyed reading about Erlang and doing some of the exercises but I found the syntax to be\na little awkward.  My first impression is it is not something I would want to work in on a\ndaily basis.  The author seemed to really like Erlang which makes me want to give\nit another try.</p>\n<p>So far, Scala seems the most promising in terms of professional development.  I’ve seen a few\ncompanies that use Scala though it is not widespread in the industry.  I am looking forward to finishing up the book with the next 2 chapters and see where it takes me.</p>","fields":{"slug":"/posts//posts/seven-languages-part2","tagSlugs":null},"frontmatter":{"date":"2021-12-18","description":"Some more quick thoughts as I continue to work through Seven Languages in Seven Weeks by Bruce Tate.","tags":null,"title":"Some Quick Thoughts on Seven Languages in Seven Weeks - Part 2","socialImage":null}}},"pageContext":{"slug":"/posts//posts/seven-languages-part2"}},"staticQueryHashes":["251939775","2764776372","401334301","63107425"]}