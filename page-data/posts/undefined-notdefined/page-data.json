{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/undefined-notdefined","result":{"data":{"markdownRemark":{"id":"b2cf96bd-f188-5187-9e56-de72c886b44c","html":"<p>There are two conditions that are closely worded but mean very different things in JavaScript.  A variable can be <em>undefined</em> vs. <em>not defined</em>.</p>\n<p>Let’s open up your browser’s console and take a closer look.</p>\n<p>Suppose you type <code class=\"language-text\">a + b</code> and hit <code class=\"language-text\">ENTER</code>.  You will see something like the following:</p>\n<p><img src=\"/media/not-defined.png\" alt=\"not defined\"></p>\n<p>This <code class=\"language-text\">ReferenceError</code> is telling us that we have not <em>declared</em> the variable <code class=\"language-text\">a</code> and therefore it is <em>not defined</em>.</p>\n<p>Let’s declare <code class=\"language-text\">a</code> and see what happens.</p>\n<p><img src=\"/media/undefined.png\" alt=\"undefined\"></p>\n<p>The <code class=\"language-text\">let</code> (as well as the <code class=\"language-text\">var</code> and <code class=\"language-text\">const</code>) keyword is used to <em>declare</em> a variable but since we have not assigned it an actual value, <code class=\"language-text\">a</code> is <em>undefined</em>.</p>\n<p>The difference may feel subtle but they really are different things. In one case, <code class=\"language-text\">a</code> doesn’t even exist (i.e. not defined) and in the other it does but doesn’t have a value.</p>","fields":{"slug":"/posts//posts/undefined-notdefined","tagSlugs":null},"frontmatter":{"date":"2020-01-29","description":"Undefined vs. Not Defined.","tags":null,"title":"Not Defined vs. Undefined in JavaScript","socialImage":null}}},"pageContext":{"slug":"/posts//posts/undefined-notdefined"}},"staticQueryHashes":["251939775","2764776372","401334301"]}