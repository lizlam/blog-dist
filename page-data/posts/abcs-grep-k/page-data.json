{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/abcs-grep-k","result":{"data":{"markdownRemark":{"id":"63e7535e-7555-5d29-aa6c-77c62af496b6","html":"<h2 id=\"k\" style=\"position:relative;\"><a href=\"#k\" aria-label=\"k permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>K</h2>\n<p>As many flags the grep command has, <code class=\"language-text\">-K</code> is <strong>not</strong> one of them.\nIn fact if you try, you will see the following error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ grep -K\ngrep: invalid option -- 'K'\nUsage: grep [OPTION]... PATTERNS [FILE]...\nTry 'grep --help' for more information.</code></pre></div>\n<p>I thought this would be a good opportunity to see how to use <code class=\"language-text\">grep</code> with errors.\nSuppose we want to look for the word “information”. How would we do that?</p>\n<p>Let’s take a look at the pipe operator <code class=\"language-text\">|</code> which can take the output of one command as the input of the next.  Remember our <code class=\"language-text\">test.txt</code> file with the following content:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sad\nhappy\nawake\ncoffee\nwork\nschool</code></pre></div>\n<p>Another way to search for “happy” is like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">cat test.txt | grep \"happy\"\nhappy</code></pre></div>\n<p>In other words, we are taking the <em>output</em> of <code class=\"language-text\">cat test.txt</code> and using that as the <em>input</em> for <code class=\"language-text\">grep happy</code>.</p>\n<p>So let’s try with our <code class=\"language-text\">grep</code> error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ grep -K | grep \"information\"</code></pre></div>\n<p>Unfortunately, this doesn’t work because <code class=\"language-text\">grep -K</code> produces an error stream.  It can be tricky to understand at first but errors are treated differently than successful output.  The <code class=\"language-text\">grep</code> command can operate on successful output (called standard out), but can’t use error output.  We want to redirect the error to standard out (i.e. make the error something <code class=\"language-text\">grep</code> can operate on) and <code class=\"language-text\">2>&amp;1</code> is how we do that.</p>\n<p>Putting it all together, this is how we would search for terms in the <code class=\"language-text\">grep</code> error:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ grep -K 2>&amp;1 | grep \"information\"\nTry 'grep --help' for more information.</code></pre></div>","fields":{"slug":"/posts//posts/abcs-grep-k","tagSlugs":null},"frontmatter":{"date":"2023-11-08","description":"What does grep -K do?","tags":null,"title":"The ABC's of grep - K","socialImage":null}}},"pageContext":{"slug":"/posts//posts/abcs-grep-k"}},"staticQueryHashes":["251939775","2764776372","401334301","63107425"]}