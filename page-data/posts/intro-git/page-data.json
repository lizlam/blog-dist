{"componentChunkName":"component---src-templates-post-template-post-template-tsx","path":"/posts/intro-git","result":{"data":{"markdownRemark":{"id":"80f89f50-564b-58ba-839a-8a20233161fe","html":"<p>Git is a version control system written by Linus Torvalds in 2005. It was created specifically to manage the Linux Kernel Project. One could say it was written by Linux Kernel Developers for Linux Kernel Developers. As a result, the initial environment for working with git is the command line.</p>\n<p>Now, if you’re not familiar with the command line (like a Linux Kernel Developer), this can feel scary.  With so many GUI tools out there, you may feel it’s not even necessary to learn.  I want to suggest that knowing how the git GUIs work under the hood is super helpful as a developer.  With some diligence and working through this tutorial, you’ll be a git command line power user in no time…well with some time.</p>\n<p><strong>NOTE</strong>: I leave out some of the git output for clarity.</p>\n<h2 id=\"creating-a-new-git-repository\" style=\"position:relative;\"><a href=\"#creating-a-new-git-repository\" aria-label=\"creating a new git repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a new git repository</h2>\n<p>Open a terminal and run the following commands:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ mkdir project \n    $ cd project\n    $ git init</code></pre></div>\n<p>What did we just do?\nWe just created an empty git repository.</p>\n<p>Let take a look at the state of the git workspace:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git status\n    On branch master\n\n    No commits yet\n\n    nothing to commit (create/copy files and use \"git add\" to track)</code></pre></div>\n<h2 id=\"add-a-file-to-our-working-directory\" style=\"position:relative;\"><a href=\"#add-a-file-to-our-working-directory\" aria-label=\"add a file to our working directory permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Add a file to our working directory</h2>\n<p>Type the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ echo ‘hello world’ > hello.txt</code></pre></div>\n<p>Take a look at the status again:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git status\n    On branch master\n\n    No commits yet\n\n    Untracked files:\n    (use \"git add &lt;file>...\" to include in what will be committed)\n\n\t  hello.txt\n\n    nothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre></div>\n<p>The status gives us a clue on what we need to do next:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git add .</code></pre></div>\n<p>Git knows we have a new file with the <em>intention</em> to add it to the repository but we have not committed it yet. This is often a point of confusion for new users.  I think of <code class=\"language-text\">git add</code> like an engagement ring.  It’s a promise to commit, but we’re not there yet.</p>\n<p>Let’s take a look at the status again:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git status\n    On branch master\n\n    No commits yet\n\n    Changes to be committed:\n      (use \"git rm --cached &lt;file>...\" to unstage)\n\n\t    new file:   hello.txt\n</code></pre></div>\n<h2 id=\"time-to-commit\" style=\"position:relative;\"><a href=\"#time-to-commit\" aria-label=\"time to commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time to commit</h2>\n<p>Type the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git commit -m “Commit first file to the repo”</code></pre></div>\n<p>Congratulations! We have made our first commit to the master branch!\nHow do we know what branch we are currently on?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     $ git branch\n     * master</code></pre></div>\n<h2 id=\"create-a-new-branch\" style=\"position:relative;\"><a href=\"#create-a-new-branch\" aria-label=\"create a new branch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create a new branch</h2>\n<p>Type the following in your terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git checkout -b dev_llam\n      Switched to a new branch 'dev_llam'</code></pre></div>\n<p>This will create a new branch and switch to that branch.<br>\nWe should be able to see both branches now:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git branch\n    * dev_llam\n      master</code></pre></div>\n<p>You may be thinking, “Wait??!! I didn’t <code class=\"language-text\">cd</code> into a new directory. How did I switch to a new branch?“.<br>\nThis can bit a little bit confusing for those coming from other version control systems.</p>\n<p>I think of it like someone pulled the rug out from under me and replaced it with a new one without me ever having to get up. You are physically sitting in the same directory in the filesystem, but the branch has been changed from underneath you.</p>\n<h2 id=\"lets-make-a-change-on-our-new-branch\" style=\"position:relative;\"><a href=\"#lets-make-a-change-on-our-new-branch\" aria-label=\"lets make a change on our new branch permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let’s make a change on our new branch.</h2>\n<p>Edit hello.txt by adding a 2nd line saying who you are.  (Example: “I am Liz.”)\nIf you check the status, you will see git knows we made changes:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ echo 'I am Liz.' >> hello.txt\n    $ cat hello.txt\n      hello world\n      I am Liz.\n    $ git status\n    On branch dev_llam\n    Changes not staged for commit:\n      (use \"git add &lt;file>...\" to update what will be committed)\n      (use \"git checkout -- &lt;file>...\" to discard changes in working directory)\n\n\t    modified:   hello.txt\n\n    no changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre></div>\n<p>We want to add our changes:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git add .</code></pre></div>\n<p>Now we want to commit them:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git commit -m “Saying who I am”</code></pre></div>\n<h2 id=\"lets-take-a-look-at-our-history-so-far\" style=\"position:relative;\"><a href=\"#lets-take-a-look-at-our-history-so-far\" aria-label=\"lets take a look at our history so far permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Let’s take a look at our history so far.</h2>\n<p>Type in the terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git log --oneline\n      187c6fa (HEAD -> dev_llam) Saying who I am\n      deccda5 (master) Commit first file to the repo.</code></pre></div>\n<p>We now have two commits in our history in our dev branch.</p>\n<p>NOTE: The seemingly random characters in front of our commit message is called a commit SHA. This commit SHA includes information about the author and date and will be unique to you. If you are following along on your terminal, don’t worry if the output looks a little different.</p>\n<p>Let’s check on master:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git checkout master\n    $ git log --oneline\n      deccda5 (HEAD -> master) Commit first file to the repo.\n    $ cat hello.txt\n      hello world</code></pre></div>\n<h2 id=\"time-to-merge\" style=\"position:relative;\"><a href=\"#time-to-merge\" aria-label=\"time to merge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Time to merge!</h2>\n<p>We want to merge our changes from dev to master.\nRemember, the target branch is always the branch you are on.  Use <code class=\"language-text\">git branch</code> if you are not sure where you are.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git merge dev_llam</code></pre></div>\n<p>Now we should see that master has the same changes as our dev branch.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git log --oneline\n      187c6fa (HEAD -> master, dev_llam) Saying who I am\n      deccda5 Commit first file to the repo.\n    $ cat hello.txt\n      hello world\n      I am Liz.</code></pre></div>\n<h2 id=\"what-about-cloning\" style=\"position:relative;\"><a href=\"#what-about-cloning\" aria-label=\"what about cloning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What about cloning?</h2>\n<p>Open another terminal window and clone the repo we just created:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git clone /path/to/git/project project2</code></pre></div>\n<p>You should see an exact copy of what we had in the original project:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ cd project2\n    $ git log --oneline \n      187c6fa (HEAD -> master, dev_llam) Saying who I am\n      deccda5 Commit first file to the repo.\n    $ cat hello.txt </code></pre></div>\n<h2 id=\"what-about-pulling\" style=\"position:relative;\"><a href=\"#what-about-pulling\" aria-label=\"what about pulling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What about pulling?</h2>\n<p>To keep our repo updated, we need to pull from the original/remote.</p>\n<p>Go to the <em>first</em> terminal window with the original project open and make a change and commit it.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">   $ echo 'I love coffee!' >> hello.txt\n   $ git add .\n   $ git commit -m \"Add line about my love of caffeine.\"</code></pre></div>\n<p>Go back to the <em>second</em> terminal window with project2 open and check its status:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git status\n    On branch master\n    Your branch is up to date with 'origin/master'.\n\n    nothing to commit, working tree clean</code></pre></div>\n<p>That’s interesting.  Didn’t we just make a change in the original project?!? Our cloned project (project2) does not know it is out of date with the original.\nThat is because we need to <em>fetch</em> the changes (note: fetching is different from pulling).</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git fetch origin master\n    $ git status\n      On branch master\n      Your branch is behind 'origin/master' by 1 commit, and can be fast-forwarded.\n        (use \"git pull\" to update your local branch)\n\n      nothing to commit, working tree clean\n</code></pre></div>\n<p>Great! Now our repo is updated…but our working directory is not.\nThis is because fetching only updates our local repo, while pulling will fetch and merge it into our local workspace.\nAs the git output suggest, let’s pull!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    $ git pull\n    $ git log --oneline\n      fb58b27 (HEAD -> master, origin/master, origin/HEAD) Add line about my love of caffeine.\n      187c6fa (origin/dev_llam) Saying who I am\n      deccda5 Commit first file to the repo.</code></pre></div>\n<p>Yay! We’re done! We have successfully pulled the coffee change from a remote repo.</p>\n<p>If you’ve made it this far, you are a trooper! Congratulations!</p>\n<p>You now know how to:</p>\n<ul>\n<li>Create a new git repository</li>\n<li>Add and commit files to a repo</li>\n<li>Create and merge branches</li>\n<li>Clone a repository</li>\n<li>Fetch and pull changes</li>\n</ul>\n<p>Hopefully this was an insightful glimpse of the things possible with <code class=\"language-text\">git</code> and the command line at your finger tips.</p>","fields":{"slug":"/posts//posts/intro-git","tagSlugs":null},"frontmatter":{"date":"2020-10-06","description":"A workshop style introduction to the git command line.","tags":null,"title":"A Gentle Introduction to the Git Command Line","socialImage":null}}},"pageContext":{"slug":"/posts//posts/intro-git"}},"staticQueryHashes":["251939775","2764776372","401334301","63107425"]}